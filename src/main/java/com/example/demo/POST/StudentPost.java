package com.example.demo.POST;

import com.example.demo.OOP.*;
import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import jakarta.persistence.PersistenceContext;
import jakarta.servlet.http.HttpSession;
import jakarta.transaction.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.io.File;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;

@Controller
@RequestMapping("/")
@Transactional
public class StudentPost {
    @PersistenceContext
    private EntityManager entityManager;
    @PostMapping("/DangKyHocSinh")
    public String DangKyHocSinh(@RequestParam("EmployeeID") String employeeID,
                                @RequestParam("StudentID") String studentID,
                                @RequestParam("FirstName") String firstName,
                                @RequestParam("LastName") String lastName,
                                @RequestParam("Email") String email,
                                @RequestParam("PhoneNumber") String phoneNumber,
                                @RequestParam(value = "MisID", required = false) String misID,
                                @RequestParam("Password") String password,
                                @RequestParam("ConfirmPassword") String confirmPassword) {

        // Ki·ªÉm tra m·∫≠t kh·∫©u c√≥ kh·ªõp kh√¥ng
        if (!password.equals(confirmPassword)) {
            return "redirect:/DangKyHocSinh?error=password_mismatch";
        }


        List<Admin> admins = entityManager.createQuery("from Admin", Admin.class).getResultList();
        Admin admin = admins.get(0);  // L·∫•y tr·ª±c ti·∫øp ƒë·ªëi t∆∞·ª£ng Admin t·ª´ danh s√°ch
        Employees employee = entityManager.find(Employees.class, employeeID);

        if (employee == null) {
            return "redirect:/DangKyHocSinh?error=invalid_employee";
        }

        // Ki·ªÉm tra xem StudentID ƒë√£ t·ªìn t·∫°i ch∆∞a
        if (entityManager.find(Students.class, studentID) != null) {
            return "redirect:/DangKyHocSinh?error=student_exists";
        }

        Students student = new Students();
        student.setFirstName(firstName);
        student.setLastName(lastName);
        student.setEmail(email);
        student.setPhoneNumber(phoneNumber);
        student.setPassword(password);
        student.setId(studentID); // Kh√¥ng c·∫ßn th√™m "STU", v√¨ ƒë√£ ki·ªÉm tra tr∆∞·ªõc ƒë√≥
        student.setAdmin(admin);
        student.setEmployee(employee);
        student.setMisId(misID);

        entityManager.persist(student);

        return "redirect:/DangNhapHocSinh";
    }

    @PostMapping("/DangNhapHocSinh")
    public String DangNhapHocSinh(@RequestParam("studentID") String studentID,
                                  @RequestParam("password") String password,
                                  ModelMap model,
                                  HttpSession session) {
        try {
            Students student = entityManager.find(Students.class, studentID);

            if (student != null && student.getPassword().equals(password)) {
                session.setAttribute("StudentID", student.getId());
                return "redirect:/TrangChuHocSinh";
            } else {
                model.addAttribute("error", "M√£ h·ªçc sinh ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!");
                return "redirect:/DangNhapHocSinh";
            }
        } catch (NoResultException e) {
            model.addAttribute("error", "M√£ h·ªçc sinh kh√¥ng t·ªìn t·∫°i!");
            return "redirect:/DangNhapHocSinh";
        }
    }
    @Transactional
    @PostMapping("/BinhLuanHocSinh")
    public String themBinhLuan(@RequestParam("postId") Long postId,
                               @RequestParam("commentText") String commentText, SessionStatus sessionStatus, HttpSession session) {
        // L·∫•y th√¥ng tin ng∆∞·ªùi b√¨nh lu·∫≠n
        Person commenter = entityManager.find(Person.class, session.getAttribute("StudentID"));

        // L·∫•y th√¥ng tin b√†i ƒëƒÉng
        Posts post = entityManager.find(Posts.class, postId);
        if (post == null) {
            throw new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y b√†i ƒëƒÉng v·ªõi ID: " + postId);
        }

        // T·∫°o m·ªõi b√¨nh lu·∫≠n
        Comments comment = new Comments(commenter, post, commentText);

        // L∆∞u v√†o database
        entityManager.persist(comment);
        return "redirect:/ChiTietLopHocHocSinh/" + post.getRoom().getRoomId();
    }

    private static final Logger log = LoggerFactory.getLogger(GiaoVienPost.class);
    @Value("${file.upload-dir:C:/uploads}")
    private String uploadDir;
    @Transactional
    @PostMapping("/BaiPostHocSinh")
    public String handleStudentPost(@RequestParam("postContent") String postContent,
                                    @RequestParam(value = "file", required = false) MultipartFile file,
                                    @RequestParam("roomId") String roomId,
                                    RedirectAttributes redirectAttributes,
                                    HttpSession session) {
        try {
            log.info("üîç X·ª≠ l√Ω b√†i ƒëƒÉng c·ªßa h·ªçc sinh. N·ªôi dung: {}", postContent);

            // üü¢ L·∫•y ID h·ªçc sinh t·ª´ session
            String studentId = (String) session.getAttribute("StudentID");
            if (studentId == null) {
                log.error("üö´ Kh√¥ng t√¨m th·∫•y ID h·ªçc sinh.");
                redirectAttributes.addFlashAttribute("error", "L·ªói: Kh√¥ng t√¨m th·∫•y ID h·ªçc sinh.");
                return "redirect:/DangNhapHocSinh";
            }

            // üìö L·∫•y th√¥ng tin h·ªçc sinh
            Students student = entityManager.find(Students.class, studentId);
            if (student == null) {
                throw new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y h·ªçc sinh v·ªõi ID: " + studentId);
            }

            // üìù T·∫°o b√†i ƒëƒÉng m·ªõi
            Posts newPost = new Posts();
            newPost.setContent(postContent);
            newPost.setCreator(student);
            newPost.setCreatedAt(LocalDateTime.now());

            // üè´ L·∫•y ph√≤ng h·ªçc
            Rooms room = entityManager.find(Rooms.class, roomId);
            if (room == null) {
                throw new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y ph√≤ng h·ªçc v·ªõi ID: " + roomId);
            }
            newPost.setRoom(room);

            // üíæ L∆∞u b√†i post v√†o DB
            entityManager.persist(newPost);
            log.info("‚úÖ B√†i ƒëƒÉng ƒë√£ ƒë∆∞·ª£c l∆∞u v·ªõi ID: {}", newPost.getPostId());

            // üìÇ X·ª≠ l√Ω t·ªáp ƒë√≠nh k√®m (n·∫øu c√≥)
            if (file != null && !file.isEmpty()) {
                byte[] fileData = file.getBytes();
                log.info("üìè K√≠ch th∆∞·ªõc t·ªáp (bytes): {}", fileData.length);

                if (fileData.length == 0) {
                    throw new IOException("‚ùå T·ªáp r·ªóng ho·∫∑c kh√¥ng ƒë·ªçc ƒë∆∞·ª£c.");
                }

                // L∆∞u t·ªáp v√†o DB
                Documents document = new Documents();
                document.setDocumentTitle(file.getOriginalFilename());
                document.setFileData(fileData);  // üü¢ L∆∞u byte[] v√†o DB
                document.setFilePath(uploadDir + File.separator + file.getOriginalFilename());
                document.setCreator(student);
                document.setPost(newPost);

                entityManager.persist(document);
                log.info("‚úÖ Document ƒë√£ l∆∞u v·ªõi ID: {}", document.getDocumentId());
            }

            redirectAttributes.addFlashAttribute("message", "B√†i ƒëƒÉng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");

        } catch (IOException e) {
            log.error("‚ùå L·ªói khi x·ª≠ l√Ω t·ªáp: {}", e.getMessage(), e);
            redirectAttributes.addFlashAttribute("error", "L·ªói khi x·ª≠ l√Ω t·ªáp: " + e.getMessage());
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
        } catch (Exception e) {
            log.error("üö´ L·ªói kh√¥ng mong mu·ªën: {}", e.getMessage(), e);
            redirectAttributes.addFlashAttribute("error", "L·ªói h·ªá th·ªëng: " + e.getMessage());
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
        }

        return "redirect:/ChiTietLopHocHocSinh/" + roomId;
    }
    @PostMapping("/GuiNhanXetGiaoVien")
    @Transactional
    public String guiNhanXetGiaoVien(@RequestParam("teacherId") String teacherId,
                                     @RequestParam("text") String text,
                                     HttpSession session,
                                     RedirectAttributes redirectAttributes) {
        try {
            log.info("üìù Nh·∫≠n x√©t gi√°o vi√™n v·ªõi ID: {}", teacherId);

            // L·∫•y ID h·ªçc sinh t·ª´ session
            Students student = entityManager.find(Students.class, session.getAttribute("StudentID"));


            // L·∫•y th√¥ng tin gi√°o vi√™n t·ª´ database
            Teachers teacher = entityManager.find(Teachers.class, teacherId);
            if (teacher == null) {
                throw new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y gi√°o vi√™n v·ªõi ID: " + teacherId);
            }
            // T·∫°o nh·∫≠n x√©t m·ªõi
            Feedbacks feedback = new Feedbacks();
            feedback.setReviewer(student);
            feedback.setTeacher(teacher);
            feedback.setReceiver(student.getEmployee());
            feedback.setText(text);
            feedback.setCreatedAt(LocalDateTime.now());

            // L∆∞u v√†o database
            entityManager.persist(feedback);
            log.info("‚úÖ Nh·∫≠n x√©t ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng.");

            // G·ª≠i th√¥ng b√°o v·ªÅ giao di·ªán
            redirectAttributes.addFlashAttribute("message", "Nh·∫≠n x√©t c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i!");

        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ª≠i nh·∫≠n x√©t: {}", e.getMessage(), e);
            redirectAttributes.addFlashAttribute("error", "C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.");
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
        }
        return "redirect:/TrangChuHocSinh";
    }




}
